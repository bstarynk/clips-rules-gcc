   /*******************************************************/
   /*      "C" Language Integrated Production System      */
   /*                                                     */
   /*             CLIPS Version 6.40  11/14/17            */
   /*                                                     */
   /*            INSTANCE COMMAND HEADER MODULE           */
   /*******************************************************/

/*************************************************************/
/* Purpose:                                                  */
/*                                                           */
/* Principal Programmer(s):                                  */
/*      Brian L. Dantes                                      */
/*                                                           */
/* Contributing Programmer(s):                               */
/*                                                           */
/* Revision History:                                         */
/*                                                           */
/*      6.23: Correction for FalseSymbol/TrueSymbol. DR0859  */
/*                                                           */
/*            Corrected compilation errors for files         */
/*            generated by constructs-to-c. DR0861           */
/*                                                           */
/*      6.24: CL_Loading a binary instance file from a run-time */
/*            program caused a bus error. DR0866             */
/*                                                           */
/*            Removed LOGICAL_DEPENDENCIES compilation flag. */
/*                                                           */
/*            Converted INSTANCE_PATTERN_MATCHING to         */
/*            DEFRULE_CONSTRUCT.                             */
/*                                                           */
/*            Renamed BOOLEAN macro type to intBool.         */
/*                                                           */
/*      6.30: Removed conditional code for unsupported       */
/*            compilers/operating systems (IBM_MCW,          */
/*            MAC_MCW, and IBM_TBC).                         */
/*                                                           */
/*            Changed integer type/precision.                */
/*                                                           */
/*            Changed garbage collection algorithm.          */
/*                                                           */
/*            Added const qualifiers to remove C++           */
/*            deprecation warnings.                          */
/*                                                           */
/*            Converted API macros to function calls.        */
/*                                                           */
/*      6.40: Removed LOCALE definition.                     */
/*                                                           */
/*            Pragma once and other inclusion changes.       */
/*                                                           */
/*            Added support for booleans with <stdbool.h>.   */
/*                                                           */
/*            Removed use of void pointers for specific      */
/*            data structures.                               */
/*                                                           */
/*            ALLOW_ENVIRONMENT_GLOBALS no longer supported. */
/*                                                           */
/*            UDF redesign.                                  */
/*                                                           */
/*************************************************************/

#ifndef _H_inscom

#pragma once

#define _H_inscom

typedef enum
  {
   UIE_NO_ERROR = 0,
   UIE_NULL_POINTER_ERROR,
   UIE_COULD_NOT_DELETE_ERROR,
   UIE_DELETED_ERROR,
   UIE_RULE_NETWORK_ERROR
  } CL_UnmakeInstanceError;

typedef enum
  {
   MIE_NO_ERROR = 0,
   MIE_NULL_POINTER_ERROR,
   MIE_PARSING_ERROR,
   MIE_COULD_NOT_CREATE_ERROR,
   MIE_RULE_NETWORK_ERROR
  } CL_MakeInstanceError;

typedef enum
  {
   IBE_NO_ERROR = 0,
   IBE_NULL_POINTER_ERROR,
   IBE_DEFCLASS_NOT_FOUND_ERROR,
   IBE_COULD_NOT_CREATE_ERROR,
   IBE_RULE_NETWORK_ERROR
  } InstanceCL_BuilderError;

typedef enum
  {
   IME_NO_ERROR = 0,
   IME_NULL_POINTER_ERROR,
   IME_DELETED_ERROR,
   IME_COULD_NOT_MODIFY_ERROR,
   IME_RULE_NETWORK_ERROR
  } InstanceModifierError;

#include "insfun.h"
#include "object.h"

#define INSTANCE_DATA 29

struct instanceData
  {
   Instance DummyInstance;
   Instance **InstanceTable;
   bool MaintainGarbageCL_Instances;
   bool MkInsMsgPass;
   bool ChangesToCL_Instances;
   IGARBAGE *InstanceGarbageList;
   struct patternEntityRecord InstanceInfo;
   Instance *InstanceList;
   unsigned long GlobalNumberOfCL_Instances;
   Instance *CurrentInstance;
   Instance *InstanceListBottom;
   bool ObjectModDupMsgValid;
   CL_UnmakeInstanceError unmakeInstanceError;
   CL_MakeInstanceError makeInstanceError;
   InstanceModifierError instanceModifierError;
   InstanceCL_BuilderError instanceCL_BuilderError;
  };

#define InstanceData(theEnv) ((struct instanceData *) GetEnvironmentData(theEnv,INSTANCE_DATA))

   void                           SetupCL_Instances(Environment *);
   CL_UnmakeInstanceError            CL_DeleteInstance(Instance *);
   CL_UnmakeInstanceError            CL_DeleteAllCL_Instances(Environment *);
   CL_UnmakeInstanceError            CL_UnmakeInstance(Instance *);
   bool                           CL_UnmakeInstanceCallback(Instance *,Environment *);
   CL_UnmakeInstanceError            UnmakeAllCL_Instances(Environment *);
#if DEBUGGING_FUNCTIONS
   void                           CL_InstancesCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_PPInstanceCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_Instances(Environment *,const char *,Defmodule *,const char *,bool);
#endif
   Instance                      *CL_MakeInstance(Environment *,const char *);
   CL_MakeInstanceError              CL_GetCL_MakeInstanceError(Environment *);
   Instance                      *CL_CreateRawInstance(Environment *,Defclass *,const char *);
   Instance                      *CL_FindInstance(Environment *,Defmodule *,const char *,bool);
   bool                           CL_ValidInstanceAddress(Instance *);
   GetSlotError                   CL_DirectGetSlot(Instance *,const char *,CLIPSValue *);
   PutSlotError                   CL_DirectPutSlot(Instance *,const char *,CLIPSValue *);
   PutSlotError                   CL_DirectPutSlotInteger(Instance *,const char *,long long);
   PutSlotError                   CL_DirectPutSlotFloat(Instance *,const char *,double);
   PutSlotError                   CL_DirectPutSlotSymbol(Instance *,const char *,const char *);
   PutSlotError                   CL_DirectPutSlotString(Instance *,const char *,const char *);
   PutSlotError                   CL_DirectPutSlotCL_InstanceName(Instance *,const char *,const char *);
   PutSlotError                   CL_DirectPutSlotCLIPSInteger(Instance *,const char *,CLIPSInteger *);
   PutSlotError                   CL_DirectPutSlotCLIPSFloat(Instance *,const char *,CLIPSFloat *);
   PutSlotError                   CL_DirectPutSlotCLIPSLexeme(Instance *,const char *,CLIPSLexeme *);
   PutSlotError                   CL_DirectPutSlotFact(Instance *,const char *,Fact *);
   PutSlotError                   CL_DirectPutSlotInstance(Instance *,const char *,Instance *);
   PutSlotError                   CL_DirectPutSlotMultifield(Instance *,const char *,Multifield *);
   PutSlotError                   CL_DirectPutSlotCLIPSExternalAddress(Instance *,const char *,CLIPSExternalAddress *);
   const char                    *CL_InstanceName(Instance *);
   Defclass                      *CL_InstanceClass(Instance *);
   unsigned long                  CL_GetGlobalNumberOfCL_Instances(Environment *);
   Instance                      *CL_GetNextInstance(Environment *,Instance *);
   Instance                      *CL_GetNextInstanceInScope(Environment *,Instance *);
   Instance                      *CL_GetNextInstanceInClass(Defclass *,Instance *);
   Instance                      *CL_GetNextInstanceInClassAndSubclasses(Defclass **,Instance *,UDFValue *);
   void                           CL_InstancePPFoCL_rm(Instance *,StringCL_Builder *);
   void                           CL_ClassCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_DeleteInstanceCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_UnmakeInstanceCommand(Environment *,UDFContext *,UDFValue *);
   void                           SymbolToCL_InstanceNameFunction(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstanceNameToSymbolFunction(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstanceAddressCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstanceNameCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstanceAddressPCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstanceNamePCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstancePCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_InstanceExistPCommand(Environment *,UDFContext *,UDFValue *);
   void                           CL_CreateInstanceHandler(Environment *,UDFContext *,UDFValue *);

#endif /* _H_inscom */
